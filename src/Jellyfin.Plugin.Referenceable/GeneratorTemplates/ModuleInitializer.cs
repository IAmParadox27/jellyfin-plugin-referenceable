// <auto-generated />
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Loader;

using Microsoft.Extensions.DependencyInjection;

namespace {{namespace}}.Generated
{
#nullable enable
    public class ModuleInitializer
    {
        public static bool IsAvailable { get; set; } = false;
        
        [ModuleInitializer]
        public static void Init()
        {
            AssemblyLoadContext? loadContext = AssemblyLoadContext.GetLoadContext(typeof(ModuleInitializer).Assembly) as AssemblyLoadContext;

            if (loadContext != null && loadContext.IsCollectible)
            {
                // Reload ourselves in a referencable way.
                // First pass we're just going to load them all into the same assembly load context.
                // Its not collectible anyway.
                AssemblyLoadContext newLoadContext = AssemblyLoadContext.All.FirstOrDefault(x => x.Name == "Jellyfin.Plugin.Referenceable") ?? new AssemblyLoadContext("Jellyfin.Plugin.Referenceable");
                
                MethodInfo? methodGetRawBytes = Assembly.GetExecutingAssembly().GetType().GetMethod("GetRawBytes", BindingFlags.Instance | BindingFlags.NonPublic);
                if (methodGetRawBytes != null)
                {
                    byte[]? assemblyBytes = methodGetRawBytes.Invoke(null, null) as byte[];

                    if (assemblyBytes != null)
                    {
                        MemoryStream memoryStream = new MemoryStream(assemblyBytes);
                        memoryStream.Seek(0, SeekOrigin.Begin);
                    
                        newLoadContext.LoadFromStream(memoryStream);
                    }
                }

                return;
            }

            AppDomain.CurrentDomain.AssemblyResolve += ResolveAssembly;
            
            IsAvailable = true;
        }
        
        public static bool IsInReferenceableContext<T>()
        {
            return !AssemblyLoadContext.GetLoadContext(typeof(T).Assembly).IsCollectible;
        }

        private static Assembly? ResolveAssembly(object? sender, ResolveEventArgs args)
        {
            return null;
        }
        
        public static dynamic? CreateReferenceableObject<T>(params object?[]? args)
        {
            AssemblyLoadContext? loadContext = AssemblyLoadContext.All.FirstOrDefault(x => x.Name == "Jellyfin.Plugin.Referenceable");

            if (loadContext == null)
            {
                throw new KeyNotFoundException(@"Could not find Jellyfin.Plugin.Referenceable as an AssemblyLoadContext");
            }
            
            Type? referenceableType = loadContext.Assemblies.SelectMany(x => x.GetTypes()).FirstOrDefault(x => x.FullName == typeof(T).FullName);

            if (referenceableType == null)
            {
                return null;
            }
            
            return Activator.CreateInstance(referenceableType, args);
        }
        
        public static dynamic? CreateReferenceableObject<T>(IServiceProvider serviceProvider, params object[]? args)
        {
            AssemblyLoadContext? loadContext = AssemblyLoadContext.All.FirstOrDefault(x => x.Name == "Jellyfin.Plugin.Referenceable");

            if (loadContext == null)
            {
                throw new KeyNotFoundException(@"Could not find Jellyfin.Plugin.Referenceable as an AssemblyLoadContext");
            }
            
            Type? referenceableType = loadContext.Assemblies.SelectMany(x => x.GetTypes()).FirstOrDefault(x => x.FullName == typeof(T).FullName);
            
            if (referenceableType == null)
            {
                return null;
            }

            if (args == null || args.Length == 0)
            {
                return ActivatorUtilities.CreateInstance(serviceProvider, referenceableType);
            }

            return ActivatorUtilities.CreateInstance(serviceProvider, referenceableType, args);
        }
    }
#nullable restore
}